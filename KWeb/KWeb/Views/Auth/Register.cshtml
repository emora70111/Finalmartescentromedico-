@model KWeb.Models.Request.UserRegisterRequest

@{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";

}

@section BaseStyles {
 
}


<div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full"
     data-sidebar-position="fixed" data-header-position="fixed">
    <div class="position-relative overflow-hidden radial-gradient min-vh-100 d-flex align-items-center justify-content-center">
        <div class="d-flex align-items-center justify-content-center w-100">
            <div class="row justify-content-center w-100">
                <div class="col-md-8 col-lg-6 col-xxl-3">
                    <div class="card mb-0">
                        <div class="card-body">

                            @if (TempData["SuccessMessage"] != null)
                            {
                                <div class="alert alert-success d-flex justify-content-between">
                                    <span>@TempData["SuccessMessage"]</span>
                                    <a href="@Url.Action("Login", "Auth")">Iniciar sesión</a>
                                </div>
                            }

                            @if (TempData["ErrorMessage"] != null)
                            {
                                <div id="errorMessage" class="alert alert-danger d-flex justify-content-between align-items-center">
                                    <span>@TempData["ErrorMessage"]</span>
                                    <button type="button" class="btn p-0" aria-label="Close" onclick="dismissMessage()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            }


                            <h5 class="text-center">Registro de Usuario</h5>
                            @using (Html.BeginForm("Register", "Auth", FormMethod.Post, new { @class = "needs-validation" }))
                            {
                                @Html.AntiForgeryToken()

                                <!-- Campos generales -->
                                <div class="mb-3">
                                    <label for="FirstName" class="form-label">Nombre</label>
                                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <label for="LastName" class="form-label">Apellido</label>
                                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", required = "required" })
                                    @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <label for="Email" class="form-label">Correo Electrónico</label>
                                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", type = "email", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-3">
                                    <label for="Phone" class="form-label">Número de Teléfono</label>
                                    @Html.TextBoxFor(m => m.Phone, new { @class = "form-control", type = "text" })
                                    @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
                                </div>

                                <div class="mb-4">
                                    <label for="Password" class="form-label">Contraseña</label>
                                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", required = "required", minlength = "8" })
                                    @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
                                </div>

                                <!-- Selector de rol -->
                                <div class="mb-3">
                                    <label for="Role" class="form-label">Rol</label>
                                    @Html.DropDownListFor(m => m.Role, new SelectList(new[] {
                                        new { Value = "", Text = "" },
                                        new { Value = Enum.GetName(typeof(KWeb.Utils.RolesEnum), KWeb.Utils.RolesEnum.Patient), Text = "Paciente" },
                                        new { Value = Enum.GetName(typeof(KWeb.Utils.RolesEnum), KWeb.Utils.RolesEnum.Doctor), Text = "Doctor" }
                                    }, "Value", "Text"), new { @class = "form-control", required = "required", id = "roleSelector" })
                                    @Html.ValidationMessageFor(m => m.Role, "", new { @class = "text-danger" })
                                </div>

              
                                <div id="doctorFields" style="display: none;">
                                    <div class="mb-3">
                                        <label for="Specialty" class="form-label">Especialidad</label>
                                        @Html.TextBoxFor(m => m.Specialty, new { @class = "form-control", required = "required" })
                                        @Html.ValidationMessageFor(m => m.Specialty, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div id="patientFields" style="display: none;">
                                    <div class="mb-3">
                                        <label for="BirthDate" class="form-label">Fecha de Nacimiento</label>
                                        @Html.TextBoxFor(m => m.BirthDate, new { @class = "form-control", type = "date", required = "required" })
                                        @Html.ValidationMessageFor(m => m.BirthDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <button type="submit" class="btn btn-primary w-100 py-8 fs-4 mb-4">Registrar</button>
                                <div class="d-flex align-items-center justify-content-center">
                                    <p class="fs-4 mb-0 fw-bold">¿Ya tienes una cuenta?</p>
                                    <a class="text-primary fw-bold ms-2 mx-1" href="@Url.Action("Login", "Auth")">Iniciar Sesión</a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section BaseScripts {
    @{
        Html.RenderPartial("_ValidationScriptsPartial");
    }

    <script>
        document.getElementById("roleSelector").addEventListener("change", function () {
            var role = this.value;
            var doctorFields = document.getElementById("doctorFields");
            var patientFields = document.getElementById("patientFields");
            var doctorInput = doctorFields.querySelector("input");
            var patientInput = patientFields.querySelector("input");

            if (role === "Doctor") {
                doctorFields.style.display = "block";
                patientFields.style.display = "none";
                doctorInput.setAttribute("required", "required");
                patientInput.removeAttribute("required");
                patientInput.value = "";
            } else if (role === "Patient") {
                doctorFields.style.display = "none";
                patientFields.style.display = "block";
                doctorInput.removeAttribute("required");
                patientInput.setAttribute("required", "required");
                doctorInput.value = "";
            } else {
                doctorFields.style.display = "none";
                patientFields.style.display = "none";
                doctorInput.removeAttribute("required");
                patientInput.removeAttribute("required");
                doctorInput.value = "";
                patientInput.value = "";
            }
        });
        function dismissMessage() {
            var messageElement = document.getElementById("errorMessage");
            if (messageElement) {
                messageElement.className = "d-none";
            }
        }
    </script>



}